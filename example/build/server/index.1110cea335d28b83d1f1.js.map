{"version":3,"file":"0.e75fe1452f2f855ebc29.hot-update.js","sources":["/Users/jakefitz/apps/react-ab/example/src/server/index.js"],"sourcesContent":["import path from 'path'\nimport Express from 'express'\nimport React from 'react'\nimport { createStore } from 'redux'\nimport { Provider } from 'react-redux'\nimport counterReducer from '../common/reducer'\nimport App from '../common/app'\nimport { renderToString } from 'react-dom/server'\nimport qs from 'qs'\nimport fs from 'fs'\n\nconst app = Express()\nconst port = 3000\n\n//Serve static files\napp.use(Express.static('build/client'))\n\n// This is fired every time the server side receives a request\napp.use(handleRender)\n\n// We are going to fill these out in the sections to follow\nfunction renderFullPage(html, preloadedState) {\n    console.log(path.join(__dirname,'build/client/assets.json'));\n    console.log(fs.readdirSync(path.join(__dirname,'build/client/assets.json')));\n    const assetMap = JSON.parse(fs.readdirSync('/'));\n    console.log(assetMap);\n    return `\n      <!doctype html>\n      <html>\n        <head>\n          <title>Redux Universal Example</title>\n        </head>\n        <body>\n          <div id=\"root\">${html}</div>\n          <script>\n            // WARNING: See the following for security issues around embedding JSON in HTML:\n            // http://redux.js.org/docs/recipes/ServerRendering.html#security-considerations\n            window.__PRELOADED_STATE__ = ${JSON.stringify(preloadedState).replace(/</g, '\\\\u003c')}\n          </script>\n          \n          <script src=\"index.c5e1556b2b1f746a97e2.js\"></script>\n        </body>\n      </html>\n      `\n  }\n\nfunction handleRender(req, res) {\n    // Read the counter from the request, if provided\n    const params = qs.parse(req.query)\n    const num = parseInt(params.counter, 10) || 0\n  \n    // Compile an initial state\n    let preloadedState = num\n  \n    // Create a new Redux store instance\n    const store = createStore(counterReducer, preloadedState)\n  \n    // Render the component to a string\n    const html = renderToString(\n      <Provider store={store}>\n        <App />\n      </Provider>\n    )\n  \n    // Grab the initial state from our Redux store\n    const finalState = store.getState()\n  \n    // Send the rendered page back to the client\n    res.send(renderFullPage(html, finalState))\n}\n\napp.listen(port)\n\n\n// WEBPACK FOOTER //\n// src/server/index.js"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;A","sourceRoot":""}